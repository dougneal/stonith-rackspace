#!/usr/bin/python

import sys, re, pyrax, novaclient, pdb

sys.path.append("/usr/share/fence")
from fencing import *

debug_fh = None

def log(level, message):
  global debug_fh

  if debug_fh != None:
    debug_fh.write(message+"\n")

  if level == 'error':
    sys.stderr.write(message+"\n")

def reboot(conn, options):
  log('debug', 'Rebooting!')

  try:
    conn.reboot('hard')

  except Exception as e:
    log('error', "Caught Exception while rebooting server: "+str(e))
    fail(EC_STATUS)

def get_server_status(server, options):
  log('debug', 'Getting server status; target status was '+options['-o'])

  # Re-login to API - for some reason if you don't do this, the server is reported
  # as ACTIVE, even during the reboot!
  server = rsc_get_server(options)

  try:
    status = server.status
    log('debug', 'Server status query returned '+status)

  except Exception as e:
    log('error', "Caught Exception obtaining server status: "+str(e))
    fail(EC_STATUS)

  if (status == 'ACTIVE'):
    log('debug', 'Reporting status as on')
    return 'on'
  else:
#  elif (status == 'HARD_REBOOT'):
    log('debug', 'Reporting status as off')
    return 'off'


def rsc_get_server(options):
  username    = options['-l']
  api_key     = options['-p']
  region      = options['-r']
  server_name = options['-s']

  try:
    pyrax.set_setting('identity_type', 'rackspace')
    pyrax.set_credentials(username, api_key = api_key, region = region)
    cs = pyrax.cloudservers
    server = cs.servers.find(name=options["-s"])

  except pyrax.exceptions.AuthenticationFailed:
    log('error', "Authentication failed for account "+username)
    fail(EC_LOGIN_DENIED)

  except novaclient.exceptions.NotFound:
    log('error', "Server "+server_name+" not found")
    fail(EC_STATUS)

  return server

def main():
  device_opt = [ "help", "version", "agent", "quiet", "verbose", "debug",
      "action", "login", "rsc_apikey", "rsc_region", "rsc_authurl", "server",
      "power_timeout", "power_wait" ]

  rsc_opts = {
    "login" : {
      "getopt"    : "l:",
      "longopt"   : "rsc-username=",
      "help"      : "-l, --rsc-username=<username>  Username of Rackspace Cloud account",
      "required"  : "1",
      "order"     : 1
    },
    "rsc_apikey" : {
      "getopt"    : "p:",
      "longopt"   : "rsc-apikey=",
      "help"      : "-p, --rsc-apikey=<api key>     Rackspace Cloud API key",
      "required"  : "1",
      "order"     : 1
    },
    "rsc_region" : {
      "getopt"    : "r:",
      "longopt"   : "rsc-region=",
      "help"      : "-r, --rsc-region=<region>      Rackspace Cloud Region (DFW,ORD,IAD,LON,SYD)",
      "required"  : "1",
      "order"     : 1
    },
    "rsc_authurl" : {
      "getopt"    : "",
      "longopt"   : "rsc-authurl=",
      "help"      : "--rsc-authurl=<authurl>        Rackspace Cloud authentication URL",
      "required"  : "0",
      "shortdesc" : "Override the API's default URL used to authenticate to the cloud service",
      "order"     : 1
    },
  	"server" : {
  	  "getopt"    : "s:",
  	  "longopt"   : "server",
  	  "help"      : "-s, --server=<server>          Name of Cloud Server",
  	  "shortdesc" : "Cloud server name",
  	  "required"  : "0",
  	  "default"   : "",
  	  "order"     : 1
  	}
  }

  all_opt.update(rsc_opts)
  options = check_input(device_opt, process_input(device_opt))

  import pprint
  pp = pprint.PrettyPrinter()
  pp.pprint(options)
  #pdb.set_trace()

  global debug_fh
  if 'debug_fh' in options:
    debug_fh = options["debug_fh"]
  
  docs = { }
  docs["shortdesc"] = "Fence agent for Rackspace Cloud"
  docs["longdesc"]  = "fence_rackspace is a fencing agent which uses the Rackspace Cloud API"
  docs["vendorurl"] = "http://www.rackspace.com/"
  show_docs(options, docs)

  conn = rsc_get_server(options)
  result = fence_action(conn, options, reboot, get_server_status)

  sys.exit(result)

if __name__ == "__main__":
  main()

